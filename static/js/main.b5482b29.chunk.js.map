{"version":3,"sources":["Box.js","helpers.js","BoxContainer.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","handleClick","bind","evt","this","changeColor","color","index","className","style","backgroundColor","onClick","Component","choice","arr","randomIndex","Math","floor","random","length","BoxContainer","state","colorAndBox","crearObjeto","obj","Array","from","numBoxes","map","e","i","allColors","id","setState","idx","newState","elm","boxes","key","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uUAwBeA,G,wDApBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFJ,E,wDAKPC,GACRC,KAAKJ,MAAMK,YAAYD,KAAKJ,MAAMM,MAAOF,KAAKJ,MAAMO,S,+BAIpD,OACI,yBACIC,UAAU,MACVC,MAAO,CAAEC,gBAAiBN,KAAKJ,MAAMM,OACrCK,QAASP,KAAKH,kB,GAfZW,c,MCHlB,SAASC,EAAOC,EAAKR,GACjB,IAAIS,EACJ,GACIA,EAAcC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAIK,cACxCb,IAAUQ,EAAIC,IACvB,OAAOD,EAAIC,G,ICATK,E,kDAsBF,WAAYpB,GAAQ,IAAD,8BACf,cAAMA,IACDqB,MAAQ,CAAEC,YAAa,IAC5B,EAAKjB,YAAc,EAAKA,YAAYH,KAAjB,gBAHJ,E,gEAOfE,KAAKmB,gB,oCAGM,IAAD,OACJC,EAAMC,MAAMC,KAAK,CAAEP,OAAQf,KAAKJ,MAAM2B,WAAYC,KAAI,SAACC,EAAGC,GAC5D,MAAO,CAAExB,MAAOO,EAAO,EAAKb,MAAM+B,WAAYC,GAAIF,MAEtD1B,KAAK6B,SAAS,CAAEX,YAAaE,M,kCAGrBlB,EAAO4B,GAAM,IAAD,OACdC,EAAW/B,KAAKiB,MAAMC,YAAYM,KAAI,SAACQ,GACzC,OAAIA,EAAIJ,KAAOE,EACJ,eAAKE,EAAZ,CAAiB9B,MAAOO,EAAO,EAAKb,MAAM+B,UAAWzB,KAElD8B,KAEXhC,KAAK6B,SAAS,CAAEX,YAAaa,M,+BAGvB,IAAD,OACCE,EAAQjC,KAAKiB,MAAMC,YAAYM,KAAI,SAACC,EAAGC,GAAJ,OACrC,kBAAC,EAAD,CACIxB,MAAOuB,EAAEvB,MACTgC,IAAKR,EACLvB,MAAOuB,EACPzB,YAAa,EAAKA,iBAI1B,OACI,yBAAKG,UAAU,gBACV6B,O,GA7DUzB,aAArBQ,EACKmB,aAAe,CAClBZ,SAAU,GACVI,UAAW,CACP,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAgDGX,QC5DAoB,MARf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,QCKciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b5482b29.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Box.css';\r\n\r\nclass Box extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(evt) {\r\n        this.props.changeColor(this.props.color, this.props.index);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"Box\"\r\n                style={{ backgroundColor: this.props.color }}\r\n                onClick={this.handleClick}\r\n            ></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Box;","function choice(arr, color) {\r\n    let randomIndex;\r\n    do {\r\n        randomIndex = Math.floor(Math.random() * arr.length);\r\n    } while (color === arr[randomIndex])\r\n    return arr[randomIndex];\r\n}\r\n\r\nexport { choice };","import React, { Component } from 'react';\r\nimport Box from './Box';\r\nimport './boxContainer.css';\r\nimport { choice } from './helpers';\r\n\r\nclass BoxContainer extends Component {\r\n    static defaultProps = {\r\n        numBoxes: 16,\r\n        allColors: [\r\n            '#BA68C8',\r\n            '#9575CD',\r\n            '#7986CB',\r\n            '#9C27B0',\r\n            '#673AB7',\r\n            '#3F51B5',\r\n            '#7B1FA2',\r\n            '#512DA8',\r\n            '#303F9F',\r\n            '#3F51B5',\r\n            '#7986CB',\r\n            '#673AB7',\r\n            '#C2185B',\r\n            '#7986CB',\r\n            '#C2185B',\r\n            '#BA68C8'\r\n        ]\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { colorAndBox: [] };\r\n        this.changeColor = this.changeColor.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.crearObjeto();\r\n    }\r\n\r\n    crearObjeto() {\r\n        const obj = Array.from({ length: this.props.numBoxes }).map((e, i) => {\r\n            return { color: choice(this.props.allColors), id: i };\r\n        });\r\n        this.setState({ colorAndBox: obj });\r\n    }\r\n\r\n    changeColor(color, idx) {\r\n        const newState = this.state.colorAndBox.map((elm) => {\r\n            if (elm.id === idx) {\r\n                return { ...elm, color: choice(this.props.allColors, color) }\r\n            }\r\n            return elm;\r\n        });\r\n        this.setState({ colorAndBox: newState });\r\n    }\r\n\r\n    render() {\r\n        const boxes = this.state.colorAndBox.map((e, i) =>\r\n            <Box\r\n                color={e.color}\r\n                key={i}\r\n                index={i}\r\n                changeColor={this.changeColor}\r\n            />\r\n        );\r\n\r\n        return (\r\n            <div className=\"BoxContainer\">\r\n                {boxes}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BoxContainer;","import React from 'react';\nimport './App.css';\nimport BoxContainer from './BoxContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BoxContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}